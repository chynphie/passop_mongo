name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  lint-and-test:
    name: ðŸ§ª Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3                                       # checkout code :contentReference[oaicite:5]{index=5}
      - uses: actions/setup-node@v3                                    # setup Node.js :contentReference[oaicite:6]{index=6}
        with: { node-version: '18' }
      - run: npm ci                                                    # install deps :contentReference[oaicite:7]{index=7}
      - run: npm run lint                                              # lint step :contentReference[oaicite:8]{index=8}
      - run: npm test                                                  # unit tests :contentReference[oaicite:9]{index=9}

  build-and-push:
    name: ðŸ“¦ Build & Push Docker Image
    needs: lint-and-test
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }}
      IMAGE: ${{ github.repository }}:${{ github.sha }}
    steps:
      - uses: actions/checkout@v3
      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_TOKEN }}                             # secure creds :contentReference[oaicite:10]{index=10}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}                                       # push image :contentReference[oaicite:11]{index=11}

  deploy-development:
    name: ðŸš€ Deploy to Development
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy container
        run: |
          # e.g. AWS CLI to update ECS service
          aws ecs update-service --cluster dev-cluster \
            --service dev-service --force-new-deployment      :contentReference[oaicite:12]{index=12}

  deploy-staging:
    name: âœ… Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Await approval
        uses: peter-evans/slash-command-dispatch@v2         :contentReference[oaicite:13]{index=13}
      - name: Deploy to staging
        run: |
          docker pull ${{ env.IMAGE }}
          docker run -d --rm \
            --name staging-test \
            -e NODE_ENV=staging \
            -p 8080:80 \
            ${{ env.IMAGE }}                              :contentReference[oaicite:14]{index=14}
      - name: Run smoke tests
        run: npm run test:smoke                            # ensure staging health :contentReference[oaicite:15]{index=15}
      - name: Tear down staging container
        run: docker stop staging-test                      :contentReference[oaicite:16]{index=16}

  deploy-production:
    name: ðŸ”’ Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://example.com
    steps:
      - name: Manual approval
        uses: hmarr/auto-approve-action@v2                :contentReference[oaicite:17]{index=17}
      - name: Deploy to prod
        run: |
          aws ecs update-service --cluster prod-cluster \
            --service prod-service --force-new-deployment  :contentReference[oaicite:18]{index=18}
